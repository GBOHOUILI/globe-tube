import React, { useState, useRef, useEffect } from "react";
import styled, { keyframes } from "styled-components";


const theme = {
  primaryColor: "#8A2BE2",
  secondaryColor: "#9370DB",
  accentColor: "#BA55D3",
  lightColor: "#E6E6FA",
  darkColor: "#4B0082",
  textColor: "#2E0854",
};

const fadeIn = keyframes`
from {
  opacity: 0;
  transform: translateY(20px);
}
to {
  opacity: 1;
  transform: translateY(0);
}`;

const Container = styled.div`
  width: 100vw;
  height: 100%;
  position: fixed; 
  top: 0;
  left: 0;
  z-index: 9999;
  display: flex;
  align-items: start;
  justify-content: start;
  background-color: rgba(0, 0, 0, 0.4);
  color: ${theme.textColor};
`;

const Wrapper = styled.div`
  top:10px;
  left:200px;
  margin:0 auto;
  overflow:hiden;
  display: flex;
  flex-direction: column;
  background-color: white;
  border-radius: 12px;
  color: ${theme.textColor};
  width: 50%;
  padding: 20px 50px;
  gap: 15px;
  box-shadow: 0 10px 40px rgba(138, 43, 226, 0.2);
  transition: all 0.3s ease;
  animation: ${fadeIn} 0.5s ease;
  position: absolute;
  cursor: move;

  @media (max-width: 768px) {
    padding: 25px 30px;
    width: 90%;
  }
`;

const Title = styled.h1`
  font-size: 24px;
  color: ${theme.primaryColor};
  font-weight: 600;
`;

const Close = styled.div`
  width: 30px;
  height: 30px;
  position: absolute;
  top: 10px;
  right: 15px;
  cursor: pointer;
  font-size: 20px;
  font-weight: bold;
  color: ${theme.darkColor};
  display: flex;
  align-items: center;
  justify-content: center;
  &:hover {
    color: red;
  }
`;

const Input = styled.input`
  border: 2px solid ${theme.secondaryColor + "50"};
  border-radius: 10px;
  padding: 12px 20px;
  width: 100%;
  font-size: 16px;
  transition: all 0.3s ease;
`;

const Desc = styled.textarea`
  border: 2px solid ${theme.secondaryColor + "50"};
  border-radius: 10px;
  padding: 12px 20px;
  width: 100%;
  font-size: 16px;
  transition: all 0.3s ease;
`;

const FileDropZone = styled.div`
  border: 2px dashed ${theme.secondaryColor};
  border-radius: 16px;
  padding: 1rem;
  text-align: center;
  cursor: pointer;
  background-color: ${({ isDragging }) =>
    isDragging ? "#ede7f6" : "transparent"};
  transition: background-color 0.3s ease, border-color 0.3s ease;
`;

const UploadIcon = styled.div`
  font-size: 2.5rem;
  margin-bottom: 12px;
`;

const UploadText = styled.div`
  margin-bottom: 12px;
`;

const Label = styled.label`
  font-size: 18px;
`;

const Button = styled.button`
  border-radius: 25px;
  border: none;
  padding: 12px 30px;
  font-weight: 600;
  font-size: 16px;
  cursor: pointer;
  background: ${theme.primaryColor};
  color: white;
  margin-top: 10px;
  transition: all 0.3s ease;
  box-shadow: 0 5px 15px rgba(138, 43, 226, 0.4);
  width: 100%;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(138, 43, 226, 0.5);
  }

  &:active {
    transform: translateY(0);
    box-shadow: 0 3px 10px rgba(138, 43, 226, 0.3);
  }
`;

const UploadVideo = ({ setOpen }) => {
  const [video, setVideo] = useState(null);
  const [img, setImg] = useState(null);
  const [title, setTitle] = useState("");
  const [desc, setDesc] = useState("");
  const [tags, setTags] = useState([]);
  const [isDragging, setIsDragging] = useState(false);
  const [inputs, setInputs] = useState({});

  const wrapperRef = useRef(null);
  const pos = useRef({ x: 0, y: 0 });

  const startDrag = (e) => {
    pos.current = {
      x: e.clientX - wrapperRef.current.offsetLeft,
      y: e.clientY - wrapperRef.current.offsetTop,
    };
    document.addEventListener("mousemove", onDrag);
    document.addEventListener("mouseup", stopDrag);
  };

  const onDrag = (e) => {
    wrapperRef.current.style.left = `${e.clientX - pos.current.x}px`;
    wrapperRef.current.style.top = `${e.clientY - pos.current.y}px`;
  };

  const stopDrag = () => {
    document.removeEventListener("mousemove", onDrag);
    document.removeEventListener("mouseup", stopDrag);
  };
  const handleChange = (e) => {
    setInputs(prev => {
      return {
        ...prev,
        [e.target.name]: e.target.value
      }
    })
  

  };
  const handleTags = (e) => {
    setTags(e.target.value.split(",").map((tag) => tag.trim()))
  }
  const [videoUrl, setVideoUrl] = useState(null);
const [imgUrl, setImgUrl] = useState(null);


const uploadFile = async (file) => {
  if (!file) return;

  const formData = new FormData();
  formData.append("file", file);
  formData.append("upload_preset","gbobe_tube"); 

  const cloudName = "duptzhpjl" ; 

  try {
    const res = await fetch(`https://api.cloudinary.com/v1_1/${cloudName}/auto/upload`, {
      method: "POST",
      body: formData,
    });
    const data = await res.json();
    console.log("Upload success:", data.secure_url);

    if (file.type.startsWith("video")) {
      setVideoUrl(data.secure_url);
    } else if (file.type.startsWith("image")) {
      setImgUrl(data.secure_url);
    }
  } catch (err) {
    console.error("Erreur lors de l'upload:", err);
  }
};


  useEffect(() => {
    uploadFile(video)
  }, [video])

  useEffect(() => {
    uploadFile(img)
  }, [img])

  return (
    <Container>
      <Wrapper ref={wrapperRef} onMouseDown={startDrag}>
        <Close onClick={() => setOpen(false)}>×</Close>
        <Title>Upload a new Video</Title>

        <Label>Video:</Label>
        <FileDropZone
          isDragging={isDragging}
          onDragOver={(e) => {
            e.preventDefault(); 
            setIsDragging(true);
          }}
          onDragLeave={() => setIsDragging(false)}
          onDrop={(e) => {
            e.preventDefault();
            setIsDragging(false);
            setVideo(e.dataTransfer.files[0]);
          }}
        >
          <UploadIcon>
                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                        <polyline points="17 8 12 3 7 8"></polyline>
                        <line x1="12" y1="3" x2="12" y2="15"></line>
                    </svg>
          </UploadIcon>
          <UploadText>Glissez-déposez votre vidéo ici</UploadText>
          <input
            name="video"
            type="file"
            accept="video/*"
            onChange={(e) => setVideo(e.target.files[0])}
          />
        </FileDropZone>

        <Input
          name="title"
          type="text"
          placeholder="Title"
          value={title}
          onChange={handleChange}
        />

        <Desc
          name="desc"
          placeholder="Description"
          rows={5}
          value={desc}
          onChange={handleChange}
        />

        <Input
          name="tags"
          type="text"
          placeholder="Separate tags with commas"
          onChange={handleTags}
        />

        <Label>Image:</Label>
        <FileDropZone
          isDragging={isDragging}
          onDragOver={(e) => {
            e.preventDefault();
            setIsDragging(true);
          }}
          onDragLeave={() => setIsDragging(false)}
          onDrop={(e) => {
            e.preventDefault();
            setIsDragging(false);
            setImg(e.dataTransfer.files[0]);
          }}
        >
          <UploadIcon>
                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                        <polyline points="17 8 12 3 7 8"></polyline>
                        <line x1="12" y1="3" x2="12" y2="15"></line>
                    </svg>
          </UploadIcon>
          <UploadText>Glissez-déposez votre image ici</UploadText>
          <input
            name="img"
            type="file"
            accept="image/*"
            onChange={(e) => setImg(e.target.files[0])}
          />
        </FileDropZone>

        <Button>Envoyer</Button>
      </Wrapper>
    </Container>
  );
};

export default UploadVideo;
